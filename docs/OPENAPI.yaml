openapi: 3.0.3
info:
  title: Gestionale Pizzeria - Cassa API
  version: 0.1.0
  description: >
    MVP API-first per la cassa: Products CRUD, Orders (multi-items), calcolo totale,
    ricevuta di cortesia PDF. Auth con Bearer (Sanctum personal access token).

servers:
  - url: http://localhost:8080
    description: Local dev

tags:
  - name: Auth
  - name: Products
  - name: Orders
  - name: Receipts

paths:
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login e rilascio token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              default:
                value: { email: "admin@example.com", password: "password" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        "401":
          description: Credenziali errate
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/products:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Products]
      summary: Lista prodotti paginata
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paginated'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/Product' }
    post:
      security: [{ bearerAuth: [] }]
      tags: [Products]
      summary: Crea prodotto
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCreate' }
      responses:
        "201": { description: Creato, content: { application/json: { schema: { $ref: '#/components/schemas/ProductWrapped' } } } }
        "422": { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/ValidationError' } } } }

  /api/products/{id}:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Products]
      summary: Dettaglio prodotto
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/ProductWrapped' } } } }
        "404": { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    put:
      security: [{ bearerAuth: [] }]
      tags: [Products]
      summary: Aggiorna prodotto
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductUpdate' }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/ProductWrapped' } } } }
        "404": { description: Not found }
        "422": { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/ValidationError' } } } }
    delete:
      security: [{ bearerAuth: [] }]
      tags: [Products]
      summary: Elimina prodotto
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "204": { description: No Content }
        "404": { description: Not found }

  /api/orders:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Orders]
      summary: Lista ordini paginata
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Paginated'
                  - type: object
                    properties:
                      data:
                        type: array
                        items: { $ref: '#/components/schemas/Order' }
    post:
      security: [{ bearerAuth: [] }]
      tags: [Orders]
      summary: Crea ordine (e ricevuta se pagato)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderCreate' }
            examples:
              paid:
                value:
                  type: in_store
                  payment_method: cash
                  items:
                    - { product_id: 1, quantity: 2 }
                    - { product_id: 2, quantity: 1 }
      responses:
        "201":
          description: Creato
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OrderWrapped' }
        "422": { description: Validation error, content: { application/json: { schema: { $ref: '#/components/schemas/ValidationError' } } } }

  /api/orders/{id}:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Orders]
      summary: Dettaglio ordine
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/OrderWrapped' } } } }
        "404": { description: Not found }

  /api/orders/{id}/receipt/pdf:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Receipts]
      summary: Scarica ricevuta di cortesia (PDF)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: PDF stream
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404": { description: Not found }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Bearer

  schemas:

    Error:
      type: object
      properties:
        message: { type: string }

    ValidationError:
      type: object
      properties:
        message: { type: string }
        errors:
          type: object
          additionalProperties:
            type: array
            items: { type: string }

    Paginated:
      type: object
      properties:
        current_page: { type: integer }
        data: { type: array, items: {} }
        first_page_url: { type: string }
        from: { type: integer, nullable: true }
        last_page: { type: integer }
        last_page_url: { type: string }
        links:
          type: array
          items:
            type: object
            properties: { url: {type:string,nullable:true}, label: {type:string}, active: {type:boolean} }
        next_page_url: { type: string, nullable: true }
        path: { type: string }
        per_page: { type: integer }
        prev_page_url: { type: string, nullable: true }
        to: { type: integer, nullable: true }
        total: { type: integer }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    LoginResponse:
      type: object
      properties:
        token: { type: string }
        token_type: { type: string, example: Bearer }

    Category:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }

    Product:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        category:
          allOf:
            - $ref: '#/components/schemas/Category'
        price: { type: number, format: float }
        stock: { type: integer }
        created_at: { type: string, format: date-time, nullable: true }

    ProductWrapped:
      type: object
      properties:
        data: { $ref: '#/components/schemas/Product' }

    ProductCreate:
      type: object
      required: [name, price]
      properties:
        name: { type: string, maxLength: 255 }
        category_id: { type: integer, nullable: true }
        price: { type: number, format: float, minimum: 0 }
        stock: { type: integer, minimum: 0, default: 0 }

    ProductUpdate:
      type: object
      properties:
        name: { type: string, maxLength: 255 }
        category_id: { type: integer, nullable: true }
        price: { type: number, format: float, minimum: 0 }
        stock: { type: integer, minimum: 0 }

    OrderItem:
      type: object
      properties:
        id: { type: integer }
        product_id: { type: integer }
        product: { $ref: '#/components/schemas/Product' }
        quantity: { type: integer }
        price: { type: number, format: float }
        subtotal: { type: number, format: float }

    Receipt:
      type: object
      properties:
        id: { type: integer }
        total: { type: number, format: float }
        payment_method: { type: string, enum: [cash, card, other] }
        issued_at: { type: string, format: date-time }

    Order:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        status: { type: string, enum: [open, paid, cancelled] }
        type: { type: string, enum: [in_store, takeaway] }
        total: { type: number, format: float }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItem' }
        receipt:
          allOf:
            - $ref: '#/components/schemas/Receipt' 
        created_at: { type: string, format: date-time, nullable: true }

    OrderWrapped:
      type: object
      properties:
        data: { $ref: '#/components/schemas/Order' }

    OrderCreate:
      type: object
      required: [type, items]
      properties:
        type: { type: string, enum: [in_store, takeaway] }
        payment_method: { type: string, enum: [cash, card, other], nullable: true }
        items:
          type: array
          minItems: 1
          items:
            type: object
            required: [product_id, quantity]
            properties:
              product_id: { type: integer }
              quantity: { type: integer, minimum: 1 }
              price: { type: number, format: float, minimum: 0, nullable: true }
